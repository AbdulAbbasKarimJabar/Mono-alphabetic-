from collections import Counter

# English letter frequency from most to least common
ENGLISH_FREQ_ORDER = "ETAOINSHRDLCUMWFGYPBVKJXQZ"

def monoalphabetic_decrypt(cipher_text):
    cipher_text = cipher_text.upper()
    # Count letter frequencies in the ciphertext
    letter_counts = Counter(filter(str.isalpha, cipher_text))
    
    # Sort letters in cipher by frequency (most to least common)
    sorted_cipher_letters = [item[0] for item in letter_counts.most_common()]
    
    # Build a tentative decryption map
    decryption_map = {}
    for i, letter in enumerate(sorted_cipher_letters):
        if i < len(ENGLISH_FREQ_ORDER):
            decryption_map[letter] = ENGLISH_FREQ_ORDER[i]
    
    # Decrypt the message using the map
    decrypted_text = ''
    for char in cipher_text:
        if char.isalpha():
            decrypted_text += decryption_map.get(char, '?')  # '?' if no match
        else:
            decrypted_text += char

    print("Decryption attempt based on frequency analysis:\n")
    print(decrypted_text)
    print("\nTentative mapping:")
    for k, v in decryption_map.items():
        print(f"{k} -> {v}")

# Example usage:
cipher_text = "ZIT JXOEA WKGVF YGB PXDHL GCTK ZIT SQMN RGU"
monoalphabetic_decrypt(cipher_text)
